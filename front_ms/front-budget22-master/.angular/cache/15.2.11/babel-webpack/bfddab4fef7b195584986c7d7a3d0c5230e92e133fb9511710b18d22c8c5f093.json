{"ast":null,"code":"import { catchError } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ServiceBudget = /*#__PURE__*/(() => {\n  class ServiceBudget {\n    // private baseUrl = 'http://127.0.0.1:8000/budget';\n    constructor(http) {\n      this.http = http;\n      this.baseUrl = 'http://172.171.78.224:8000/budget';\n    }\n    // Get all budgets\n    getBudgets() {\n      return this.http.get(`${this.baseUrl}`);\n    }\n    // Get a budget by ID\n    getBudget(id) {\n      return this.http.get(`${this.baseUrl}/${id}`);\n    }\n    // Create a new budget\n    createBudget(budget) {\n      return this.http.post(`${this.baseUrl}/add`, budget);\n    }\n    // Update an existing budget\n    updateBudget(id, budget) {\n      return this.http.put(`${this.baseUrl}/${id}/edit`, budget);\n    }\n    // Delete a budget by ID\n    deleteBudget(id) {\n      return this.http.delete(`${this.baseUrl}/${id}`);\n    }\n    // Get budgets by month\n    getBudgetsByMonth(month) {\n      return this.http.get(`${this.baseUrl}/budgets/${month}`);\n    }\n    addBudgetWithMonth(newBudgetData, month) {\n      const url = `${this.baseUrl}/add/${month}`;\n      return this.http.post(url, newBudgetData).pipe(catchError(this.handleError));\n    }\n    handleError(error) {\n      console.error('An error occurred', error);\n      return Promise.reject(error.message || error);\n    }\n    // Fetch transactions for a specific budget\n    getTransactionsForBudget(budgetId) {\n      return this.http.get(`${this.baseUrl}/${budgetId}/transactions`);\n    }\n    // Method to fetch the name of the budget by its ID\n    // Method to get a budget by its name\n    getBudgetByName(name) {\n      return this.http.get(`${this.baseUrl}/${name}`);\n    }\n  }\n  ServiceBudget.ɵfac = function ServiceBudget_Factory(t) {\n    return new (t || ServiceBudget)(i0.ɵɵinject(i1.HttpClient));\n  };\n  ServiceBudget.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ServiceBudget,\n    factory: ServiceBudget.ɵfac,\n    providedIn: 'root'\n  });\n  return ServiceBudget;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}